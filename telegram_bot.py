import logging
import asyncio
import nest_asyncio
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import openpyxl
from dict_extractor.dict_extractor import DictionaryTermExtractor
from test_model import extract_terms_with_model

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = "8165832655:AAEHo5fVYEGoHnB_FDR1LB_uYhekQHvlc_k"

TERMS_DIR = "terminator/terms_extractor/dict_extractor/ngramm_lemma_terms"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DictionaryTermExtractor
dict_extractor = DictionaryTermExtractor(terms_dir=TERMS_DIR)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
TEMP_TERMS = []

def extract_terms_from_text(text):
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        terms_dict = set(dict_extractor.extract_terms(text))
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏
        terms_model = set(extract_terms_with_model(text))

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
        filtered_model_terms = terms_model & terms_dict

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
        combined_terms = list(terms_dict | filtered_model_terms)
        return combined_terms
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤: {e}", exc_info=True)
        return []


# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel
def create_excel_file(terms, filename="terms.xlsx"):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–¢–µ—Ä–º–∏–Ω—ã"

    ws.append(["–¢–µ—Ä–º–∏–Ω"])  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

    for term in terms:
        ws.append([term])

    wb.save(filename)
    return filename

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.
    """
    welcome_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—é —Ç–µ—Ä–º–∏–Ω–æ–≤.\n\n"
        "üõ† –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "1Ô∏è‚É£ –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è –∏ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.\n"
        "2Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª Excel.\n\n"
        "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.\n"
        
    )
    await update.message.reply_text(welcome_message)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    global TEMP_TERMS
    user_text = update.message.text
    TEMP_TERMS = extract_terms_from_text(user_text)

    if TEMP_TERMS:
        keyboard = [
            [InlineKeyboardButton("üìÇ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        response = (
            "üìë **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:\n" + ", ".join(TEMP_TERMS) +
            "\n\n–í—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª Excel, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤—ã–¥–µ–ª—è–µ—Ç —Ç–µ—Ä–º–∏–Ω—ã.
    """
    global TEMP_TERMS
    document = update.message.document
    file_path = await document.get_file()
    file_name = f"temp_{document.file_name}"
    await file_path.download_to_drive(file_name)

    try:
        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        logging.info(f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {file_name}")
        with open(file_name, "r", encoding="utf-8") as f:
            text = f.read()

        TEMP_TERMS = extract_terms_from_text(text)

        if TEMP_TERMS:
            keyboard = [
                [InlineKeyboardButton("üìÇ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            response = (
                "üìë **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:**\n\n"
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:\n" + ", ".join(TEMP_TERMS) +
                "\n\n–í—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª Excel, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                parse_mode="Markdown"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.",
            parse_mode="Markdown"
        )
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_name):
            os.remove(file_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "export_excel":
        filename = create_excel_file(TEMP_TERMS)
        await query.message.reply_document(document=open(filename, "rb"))
        os.remove(filename)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
